// Generated by CoffeeScript 1.7.1
(function() {
  var Binding, DEFAULT_BIND, DEFAULT_PROTO, EventEmitter, VERBOSE, log, randomPort, randomString, util, zmq, _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  zmq = require('zmq');

  util = require('util');

  EventEmitter = require('events').EventEmitter;

  _ref = require('./helpers'), randomPort = _ref.randomPort, randomString = _ref.randomString, log = _ref.log;

  VERBOSE = false;

  DEFAULT_PROTO = 'tcp';

  DEFAULT_BIND = process.env.SOMATA_BIND || '0.0.0.0';

  module.exports = Binding = (function(_super) {
    __extends(Binding, _super);

    function Binding(options) {
      if (options == null) {
        options = {};
      }
      this.id = this.id || randomString();
      this.proto = options.proto || DEFAULT_PROTO;
      this.bind = DEFAULT_BIND;
      this.host = options.host;
      this.port = options.port || randomPort();
      this.tryBinding();
    }

    Binding.prototype.didBind = function() {
      log("Socket " + this.id + " bound to " + this.address + "...");
      process.nextTick((function(_this) {
        return function() {
          return _this.emit('bind');
        };
      })(this));
      return this.socket.on('message', (function(_this) {
        return function(client_id, message_json) {
          return _this.handleMessage(client_id.toString(), JSON.parse(message_json));
        };
      })(this));
    };

    Binding.prototype.makeAddress = function() {
      return this.address = this.proto + '://' + this.bind + ':' + this.port;
    };

    Binding.prototype.tryBinding = function(n_retried) {
      var err;
      if (n_retried == null) {
        n_retried = 0;
      }
      try {
        this.makeAddress();
        log.i("[tryBinding] Attempting to bind on " + this.address + "...");
        this.socket = zmq.socket('router');
        this.socket.bindSync(this.address);
        return this.didBind();
      } catch (_error) {
        err = _error;
        log.e(err);
        if (n_retried < 5) {
          log.w("[tryBinding] Retrying...");
          this.port = randomPort();
          return setTimeout((function(_this) {
            return function() {
              return _this.tryBinding(n_retried + 1);
            };
          })(this), 1000);
        } else {
          log.e("[tryBinding] Retried too many times.");
          return process.exit();
        }
      }
    };

    Binding.prototype.send = function(client_id, message) {
      return this.socket.send([client_id, JSON.stringify(message)]);
    };

    Binding.prototype.handleMessage = function(client_id, message) {
      if (VERBOSE) {
        log("<" + client_id + ">: " + (util.inspect(message)));
      }
      return this.emit(message.kind, client_id, message);
    };

    return Binding;

  })(EventEmitter);

}).call(this);
