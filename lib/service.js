// Generated by CoffeeScript 1.7.1
(function() {
  var Binding, ConsulAgent, Service, VERBOSE, helpers, log, os, util, zerorpc, _,
    __slice = [].slice;

  os = require('os');

  util = require('util');

  zerorpc = require('zerorpc');

  helpers = require('./helpers');

  _ = require('underscore');

  ConsulAgent = require('./consul-agent');

  Binding = require('./binding');

  log = helpers.log;

  VERBOSE = false;

  Service = (function() {
    function Service(name, methods, options) {
      this.name = name;
      this.methods = methods != null ? methods : {};
      if (options == null) {
        options = {};
      }
      this.binding = options.binding || {};
      this.binding.proto = options.proto || 'tcp';
      this.binding.port = options.port || helpers.randomPort();
      this.consul_agent = new ConsulAgent;
      this.service_binding = new Binding(this.binding);
      this.service_binding.on('method', this.handleMethod.bind(this));
      this.register();
      process.on('SIGINT', (function(_this) {
        return function() {
          return _this.deregister(function() {
            return process.exit();
          });
        };
      })(this));
    }

    Service.prototype.handleMethod = function(client_id, message) {
      var _method;
      if (VERBOSE) {
        log("<" + client_id + ">: " + (util.inspect(message, {
          depth: null
        })));
      }
      if (_method = this.methods[message.method]) {
        if (VERBOSE) {
          log('Executing ' + message.method);
        }
        return _method.apply(null, __slice.call(message.args).concat([(function(_this) {
          return function(err, response) {
            return _this.service_binding.send(client_id, {
              id: message.id,
              type: 'response',
              response: response
            });
          };
        })(this)]));
      } else {
        return log.i('No method ' + message.method);
      }
    };

    Service.prototype.register = function(cb) {
      return this.consul_agent.registerService({
        Name: this.name,
        Port: this.binding.port,
        Tags: ["proto:" + this.binding.proto]
      }, (function(_this) {
        return function(err, registered) {
          log.s("Registered `" + _this.name + "` on :" + _this.binding.port);
          if (cb != null) {
            return cb(null, registered);
          }
        };
      })(this));
    };

    Service.prototype.deregister = function(cb) {
      return this.consul_agent.deregisterService(this.name, (function(_this) {
        return function(err, deregistered) {
          log.e("Deregistered `" + _this.name + "` from :" + _this.binding.port);
          if (cb != null) {
            return cb(null, deregistered);
          }
        };
      })(this));
    };

    return Service;

  })();

  module.exports = Service;

}).call(this);
