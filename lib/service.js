// Generated by CoffeeScript 1.7.1
(function() {
  var Binding, CHECK_INTERVAL, ConsulAgent, EventEmitter, PREFIX, SomataService, VERBOSE, descend, helpers, log, os, util, _,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __slice = [].slice;

  os = require('os');

  util = require('util');

  helpers = require('./helpers');

  _ = require('underscore');

  EventEmitter = require('events').EventEmitter;

  ConsulAgent = require('./consul-agent');

  Binding = require('./binding');

  log = helpers.log;

  VERBOSE = process.env.SOMATA_VERBOSE || false;

  CHECK_INTERVAL = 9000;

  PREFIX = '';

  if (process.env.SOMATA_PREFIX != null) {
    PREFIX = process.env.SOMATA_PREFIX + ':';
  }

  descend = function(o, c) {
    if (c.length === 1) {
      return o[c[0]].bind(o);
    } else {
      return descend(o[c.shift()], c);
    }
  };

  module.exports = SomataService = (function(_super) {
    __extends(SomataService, _super);

    function SomataService(name, methods, options) {
      this.name = name;
      this.methods = methods != null ? methods : {};
      if (options == null) {
        options = {};
      }
      this.name = PREFIX + this.name;
      this.id = this.name + '~' + helpers.randomString();
      this.rpc_options = options.rpc_options || {};
      this.pub_options = options.pub_options || {};
      this.consul_agent = new ConsulAgent;
      this.checkBindingPort((function(_this) {
        return function() {
          _this.bindRPC();
          return _this.register();
        };
      })(this));
      process.on('SIGINT', (function(_this) {
        return function() {
          return _this.deregister(function() {
            return process.exit();
          });
        };
      })(this));
    }

    SomataService.prototype.bindRPC = function() {
      this.rpc_binding = new Binding(this.rpc_options);
      this.rpc_binding.on('method', this.handleMethod.bind(this));
      this.rpc_binding.on('subscribe', this.handleSubscribe.bind(this));
      return this.rpc_binding.on('unsubscribe', this.handleUnsubscribe.bind(this));
    };

    SomataService.prototype.handleMethod = function(client_id, message) {
      var arity_mismatch, e, err, method_name, _method, _sendError, _sendResponse;
      if (VERBOSE) {
        log("<" + client_id + ">: " + (util.inspect(message, {
          depth: null
        })));
      }
      method_name = message.method;
      if (_method = this.getMethod(method_name)) {
        _sendResponse = (function(_this) {
          return function(response) {
            return _this.rpc_binding.send(client_id, {
              id: message.id,
              kind: 'response',
              response: response
            });
          };
        })(this);
        _sendError = (function(_this) {
          return function(error) {
            return _this.rpc_binding.send(client_id, {
              id: message.id,
              kind: 'error',
              error: error
            });
          };
        })(this);
        if (VERBOSE) {
          log('Executing ' + method_name);
        }
        try {
          return _method.apply(null, __slice.call(message.args).concat([(function(_this) {
            return function(err, response) {
              if (err) {
                return _sendError(err);
              } else {
                return _sendResponse(response);
              }
            };
          })(this)]));
        } catch (_error) {
          e = _error;
          err = e.toString();
          arity_mismatch = message.args.length !== _method.length - 1;
          if (arity_mismatch && e instanceof TypeError && err.slice(11) === 'undefined is not a function') {
            err = "ArityError? method `" + method_name + "` takes " + (_method.length - 1) + " arguments.";
          }
          log.e('[ERROR] ' + err);
          console.log(e.stack);
          return _sendError(err);
        }
      } else {
        return log.i('No method ' + message.method);
      }
    };

    SomataService.prototype.getMethod = function(method_name) {
      var method_context, _method;
      if (method_name[0] === '_') {
        method_name = method_name.slice(1);
        _method = this[method_name];
        return _method;
      }
      if ((method_context = method_name.split('.')).length > 1) {
        return descend(this.methods, method_context);
      } else {
        return this.methods[method_name];
      }
    };

    SomataService.prototype.subscriptions_by_type = {};

    SomataService.prototype.subscriptions_by_client = {};

    SomataService.prototype.handleSubscribe = function(client_id, message) {
      var subscription_id, subscription_key, type, _base, _base1;
      type = message.type;
      subscription_id = message.id;
      subscription_key = [client_id, subscription_id].join(':');
      log.i("Subscribing <" + subscription_key + ">");
      (_base = this.subscriptions_by_type)[type] || (_base[type] = []);
      this.subscriptions_by_type[type].push(subscription_key);
      (_base1 = this.subscriptions_by_client)[client_id] || (_base1[client_id] = []);
      return this.subscriptions_by_client[client_id].push(subscription_key);
    };

    SomataService.prototype.handleUnsubscribe = function(client_id, message) {
      var subscription_id, subscription_key, subscription_keys, type, _ref;
      type = message.type;
      subscription_id = message.id;
      subscription_key = [client_id, subscription_id].join(':');
      log.w("Unsubscribing <" + subscription_key + ">");
      _ref = this.subscriptions_by_type;
      for (type in _ref) {
        subscription_keys = _ref[type];
        this.subscriptions_by_type[type] = _.without(subscription_keys, subscription_key);
      }
      return this.subscriptions_by_client[client_id] = _.without(this.subscriptions_by_client[client_id], subscription_key);
    };

    SomataService.prototype.publish = function(type, event) {
      return _.map(this.subscriptions_by_type[type], (function(_this) {
        return function(subscription_key) {
          var client_id, subscription_id, _ref;
          _ref = subscription_key.split(':'), client_id = _ref[0], subscription_id = _ref[1];
          return _this.sendEvent(client_id, subscription_id, event);
        };
      })(this));
    };

    SomataService.prototype.sendEvent = function(client_id, subscription_id, event) {
      return this.rpc_binding.send(client_id, {
        id: subscription_id,
        kind: 'event',
        event: event
      });
    };

    SomataService.prototype.end = function(type) {
      _.map(this.subscriptions_by_type[type], (function(_this) {
        return function(subscription_key) {
          var client_id, subscription_id, _ref;
          _ref = subscription_key.split(':'), client_id = _ref[0], subscription_id = _ref[1];
          return _this.sendEnd(client_id, subscription_id);
        };
      })(this));
      return delete this.subscriptions_by_type[type];
    };

    SomataService.prototype.sendEnd = function(client_id, subscription_id) {
      return this.rpc_binding.send(client_id, {
        id: subscription_id,
        kind: 'end'
      });
    };

    SomataService.prototype.handleStatus = function(cb) {
      return cb(null, {
        health: 'ok',
        uptime: process.uptime(),
        memory: process.memoryUsage(),
        load: os.loadavg()
      });
    };

    SomataService.prototype.register = function(cb) {
      return this.consul_agent.registerService({
        Name: this.name,
        Id: this.id,
        Port: this.rpc_binding.port,
        Tags: ["proto:" + this.rpc_binding.proto],
        Check: {
          Interval: 60,
          TTL: "10s"
        }
      }, (function(_this) {
        return function(err, registered) {
          _this.startChecks();
          log.s("Registered `" + _this.name + "` on :" + _this.rpc_binding.port);
          if (cb != null) {
            return cb(null, registered);
          }
        };
      })(this));
    };

    SomataService.prototype.checkBindingPort = function(cb) {
      return this.consul_agent.getUnhealthyServiceInstances(this.name, (function(_this) {
        return function(err, unhealthy_instances) {
          if (unhealthy_instances.length) {
            _this.rpc_options.port = (helpers.randomChoice(unhealthy_instances)).Service.Port;
          } else {
            _this.rpc_options.port = helpers.randomPort();
          }
          return cb();
        };
      })(this));
    };

    SomataService.prototype.startChecks = function() {
      return setInterval(((function(_this) {
        return function() {
          return _this.consul_agent.checkPass('service:' + _this.id);
        };
      })(this)), CHECK_INTERVAL);
    };

    SomataService.prototype.deregister = function(cb) {
      return this.consul_agent.deregisterService(this.id, (function(_this) {
        return function(err, deregistered) {
          log.e("Deregistered `" + _this.name + "` from :" + _this.rpc_binding.port);
          if (cb != null) {
            return cb(null, deregistered);
          }
        };
      })(this));
    };

    return SomataService;

  })(EventEmitter);

}).call(this);
