// Generated by CoffeeScript 1.7.1
(function() {
  var Binding, ConsulAgent, Service, VERBOSE, helpers, log, os, util, _,
    __slice = [].slice;

  os = require('os');

  util = require('util');

  helpers = require('./helpers');

  _ = require('underscore');

  ConsulAgent = require('./consul-agent');

  Binding = require('./binding');

  log = helpers.log;

  VERBOSE = false;

  Service = (function() {
    function Service(name, methods, options) {
      this.name = name;
      this.methods = methods != null ? methods : {};
      if (options == null) {
        options = {};
      }
      this.binding = options.binding || {};
      this.binding.proto = options.proto || 'tcp';
      this.binding.port = options.port || helpers.randomPort();
      this.consul_agent = new ConsulAgent;
      this.service_binding = new Binding(this.binding);
      this.service_binding.on('method', this.handleMethod.bind(this));
      this.register();
      process.on('SIGINT', (function(_this) {
        return function() {
          return _this.deregister(function() {
            return process.exit();
          });
        };
      })(this));
    }

    Service.prototype.handleMethod = function(client_id, message) {
      var arity_mismatch, e, err, method_name, _method, _sendError, _sendResponse;
      if (VERBOSE) {
        log("<" + client_id + ">: " + (util.inspect(message, {
          depth: null
        })));
      }
      method_name = message.method;
      if (_method = this.getMethod(method_name)) {
        _sendResponse = (function(_this) {
          return function(response) {
            return _this.service_binding.send(client_id, {
              id: message.id,
              kind: 'response',
              response: response
            });
          };
        })(this);
        _sendError = (function(_this) {
          return function(error) {
            return _this.service_binding.send(client_id, {
              id: message.id,
              kind: 'error',
              error: error
            });
          };
        })(this);
        if (VERBOSE) {
          log('Executing ' + method_name);
        }
        try {
          return _method.apply(null, __slice.call(message.args).concat([(function(_this) {
            return function(err, response) {
              if (err) {
                return _sendError(err);
              } else {
                return _sendResponse(response);
              }
            };
          })(this)]));
        } catch (_error) {
          e = _error;
          err = e.toString();
          arity_mismatch = message.args.length !== _method.length - 1;
          if (arity_mismatch && e instanceof TypeError && err.slice(11) === 'undefined is not a function') {
            err = "ArityError? method `" + method_name + "` takes " + (_method.length - 1) + " arguments.";
          }
          return _sendError(err);
        }
      } else {
        return log.i('No method ' + message.method);
      }
    };

    Service.prototype.getMethod = function(method_name) {
      var descend, method_context;
      descend = function(o, c) {
        if (c.length === 1) {
          return o[c[0]].bind(o);
        } else {
          return descend(o[c.shift()], c);
        }
      };
      if ((method_context = method_name.split('.')).length > 1) {
        return descend(this.methods, method_context);
      } else {
        return this.methods[method_name];
      }
    };

    Service.prototype.register = function(cb) {
      return this.consul_agent.registerService({
        Name: this.name,
        Port: this.binding.port,
        Tags: ["proto:" + this.binding.proto]
      }, (function(_this) {
        return function(err, registered) {
          log.s("Registered `" + _this.name + "` on :" + _this.binding.port);
          if (cb != null) {
            return cb(null, registered);
          }
        };
      })(this));
    };

    Service.prototype.deregister = function(cb) {
      return this.consul_agent.deregisterService(this.name, (function(_this) {
        return function(err, deregistered) {
          log.e("Deregistered `" + _this.name + "` from :" + _this.binding.port);
          if (cb != null) {
            return cb(null, deregistered);
          }
        };
      })(this));
    };

    return Service;

  })();

  module.exports = Service;

}).call(this);
