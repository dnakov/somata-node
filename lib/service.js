// Generated by CoffeeScript 1.10.0
(function() {
  var Binding, Connection, EXTERNAL, EventEmitter, REGISTRY_HOST, REGISTRY_PORT, SERVICE_HOST, SomataService, VERBOSE, _, emitters, helpers, log, os, util,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty,
    slice = [].slice;

  os = require('os');

  util = require('util');

  helpers = require('./helpers');

  _ = require('underscore');

  EventEmitter = require('events').EventEmitter;

  emitters = require('./events');

  Binding = require('./binding');

  Connection = require('./connection');

  log = helpers.log;

  REGISTRY_HOST = process.env.SOMATA_REGISTRY_HOST || '127.0.0.1';

  REGISTRY_PORT = process.env.SOMATA_REGISTRY_PORT || 8420;

  VERBOSE = process.env.SOMATA_VERBOSE || false;

  EXTERNAL = process.env.SOMATA_EXTERNAL || false;

  SERVICE_HOST = process.env.SOMATA_SERVICE_HOST;

  module.exports = SomataService = (function(superClass) {
    extend(SomataService, superClass);

    function SomataService(name, methods, options) {
      var base;
      this.name = name;
      this.methods = methods != null ? methods : {};
      if (options == null) {
        options = {};
      }
      this.id = this.name + '~' + helpers.randomString();
      _.extend(this, options);
      this.rpc_options || (this.rpc_options = {});
      (base = this.rpc_options).host || (base.host = SERVICE_HOST);
      this.bindRPC((function(_this) {
        return function() {
          return _this.register();
        };
      })(this));
      emitters.exit.onExit((function(_this) {
        return function(cb) {
          return _this.deregister(cb);
        };
      })(this));
    }

    SomataService.prototype.bindRPC = function(cb) {
      this.rpc_binding = new Binding(this.rpc_options);
      this.rpc_binding.on('bind', cb);
      this.rpc_binding.on('ping', this.handlePing.bind(this));
      this.rpc_binding.on('method', this.handleMethod.bind(this));
      this.rpc_binding.on('subscribe', this.handleSubscribe.bind(this));
      return this.rpc_binding.on('unsubscribe', this.handleUnsubscribe.bind(this));
    };

    SomataService.prototype.sendResponse = function(client_id, message_id, response) {
      return this.rpc_binding.send(client_id, {
        id: message_id,
        kind: 'response',
        response: response
      });
    };

    SomataService.prototype.sendError = function(client_id, message_id, error) {
      return this.rpc_binding.send(client_id, {
        id: message_id,
        kind: 'error',
        error: error
      });
    };

    SomataService.prototype.handleMethod = function(client_id, message) {
      var _method, arity_mismatch, e, err, error1, method_name;
      if (VERBOSE) {
        log("<" + client_id + ">: " + (util.inspect(message, {
          depth: null
        })));
      }
      method_name = message.method;
      if (_method = this.getMethod(method_name)) {
        if (VERBOSE) {
          log('Executing ' + method_name);
        }
        try {
          return _method.apply(null, slice.call(message.args).concat([(function(_this) {
            return function(err, response) {
              if (err) {
                return _this.sendError(client_id, message.id, err);
              } else {
                return _this.sendResponse(client_id, message.id, response);
              }
            };
          })(this)]));
        } catch (error1) {
          e = error1;
          err = e.toString();
          arity_mismatch = message.args.length !== _method.length - 1;
          if (arity_mismatch && e instanceof TypeError && err.slice(11) === 'undefined is not a function') {
            err = "ArityError? method `" + method_name + "` takes " + (_method.length - 1) + " arguments.";
          }
          log.e('[ERROR] ' + err);
          console.error(e.stack);
          return this.sendError(client_id, message.id, err);
        }
      } else {
        log.e('[ERROR] No method ' + message.method);
        return this.sendError(client_id, message.id, "No method " + message.method);
      }
    };

    SomataService.prototype.getMethod = function(method_name) {
      var _method, method_context;
      if (method_name[0] === '_') {
        method_name = method_name.slice(1);
        _method = this[method_name];
        return _method;
      }
      if ((method_context = method_name.split('.')).length > 1) {
        return helpers.descend(this.methods, method_context);
      } else {
        return this.methods[method_name];
      }
    };

    SomataService.prototype.known_pings = {};

    SomataService.prototype.handlePing = function(client_id, message) {
      var response;
      if (VERBOSE) {
        log("<" + client_id + ">: " + (util.inspect(message, {
          depth: null
        })));
      }
      if (this.known_pings[client_id]) {
        response = 'pong';
      } else {
        this.known_pings[client_id] = true;
        response = 'hello';
      }
      if (typeof this.gotPing === "function") {
        this.gotPing(client_id);
      }
      return this.sendResponse(client_id, message.id, response);
    };

    SomataService.prototype.subscriptions_by_event_name = {};

    SomataService.prototype.subscriptions_by_client = {};

    SomataService.prototype.handleSubscribe = function(client_id, message) {
      var base, base1, event_name, subscription_id, subscription_key;
      event_name = message.type;
      subscription_id = message.id;
      subscription_key = [client_id, subscription_id].join('::');
      log.i("Subscribing <" + subscription_key + ">");
      (base = this.subscriptions_by_event_name)[event_name] || (base[event_name] = []);
      this.subscriptions_by_event_name[event_name].push(subscription_key);
      (base1 = this.subscriptions_by_client)[client_id] || (base1[client_id] = []);
      return this.subscriptions_by_client[client_id].push(subscription_key);
    };

    SomataService.prototype.handleUnsubscribe = function(client_id, message) {
      var event_name, ref, subscription_id, subscription_key, subscription_keys;
      event_name = message.type;
      subscription_id = message.id;
      subscription_key = [client_id, subscription_id].join('::');
      log.w("Unsubscribing <" + subscription_key + ">");
      ref = this.subscriptions_by_event_name;
      for (event_name in ref) {
        subscription_keys = ref[event_name];
        this.subscriptions_by_event_name[event_name] = _.without(subscription_keys, subscription_key);
      }
      return this.subscriptions_by_client[client_id] = _.without(this.subscriptions_by_client[client_id], subscription_key);
    };

    SomataService.prototype.publish = function(event_name, event) {
      return _.map(this.subscriptions_by_event_name[event_name], (function(_this) {
        return function(subscription_key) {
          var client_id, ref, subscription_id;
          ref = subscription_key.split('::'), client_id = ref[0], subscription_id = ref[1];
          return _this.sendEvent(client_id, subscription_id, event);
        };
      })(this));
    };

    SomataService.prototype.sendEvent = function(client_id, subscription_id, event) {
      return this.rpc_binding.send(client_id, {
        id: subscription_id,
        kind: 'event',
        event: event
      });
    };

    SomataService.prototype.end = function(event_name) {
      _.map(this.subscriptions_by_event_name[event_name], (function(_this) {
        return function(subscription_key) {
          var client_id, ref, subscription_id;
          ref = subscription_key.split('::'), client_id = ref[0], subscription_id = ref[1];
          return _this.sendEnd(client_id, subscription_id);
        };
      })(this));
      return delete this.subscriptions_by_event_name[event_name];
    };

    SomataService.prototype.sendEnd = function(client_id, subscription_id) {
      return this.rpc_binding.send(client_id, {
        id: subscription_id,
        kind: 'end'
      });
    };

    SomataService.prototype.handleStatus = function(cb) {
      return cb(null, {
        health: 'ok',
        uptime: process.uptime(),
        memory: process.memoryUsage(),
        load: os.loadavg()
      });
    };

    SomataService.prototype.register = function() {
      this.registry_connection = new Connection({
        port: REGISTRY_PORT,
        host: REGISTRY_HOST
      });
      this.registry_connection.service_instance = {
        id: 'registry'
      };
      this.registry_connection.on('connect', this.registryConnected.bind(this));
      return this.registry_connection.sendPing();
    };

    SomataService.prototype.registryConnected = function() {
      return this.sendRegister();
    };

    SomataService.prototype.sendRegister = function(cb) {
      var service_instance;
      service_instance = {
        id: this.id,
        name: this.name,
        host: this.rpc_binding.host,
        port: this.rpc_binding.port,
        methods: Object.keys(this.methods)
      };
      return this.registry_connection.sendMethod(null, 'registerService', [service_instance], (function(_this) {
        return function(err, registered) {
          log.s("Registered service `" + _this.id + "` on " + _this.rpc_binding.address);
          if (cb != null) {
            return cb(null, registered);
          }
        };
      })(this));
    };

    SomataService.prototype.deregister = function(cb) {
      return this.registry_connection.sendMethod(null, 'deregisterService', [this.name, this.id], (function(_this) {
        return function(err, deregistered) {
          log.e("[deregister] Deregistered `" + _this.id + "` from :" + _this.rpc_binding.port);
          if (cb != null) {
            return cb(null, deregistered);
          }
        };
      })(this));
    };

    return SomataService;

  })(EventEmitter);

}).call(this);
