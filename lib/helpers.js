// Generated by CoffeeScript 1.11.1
(function() {
  var _, ansi, crypto, date_format, descend, log, logDate, moment, util;

  util = require('util');

  crypto = require('crypto');

  _ = require('underscore');

  moment = require('moment');

  ansi = require('ansi')(process.stdout, {
    enabled: true
  });

  date_format = 'YYYY-MM-DD hh:mm:ss';

  logDate = function() {
    ansi.grey();
    ansi.write('[' + moment().format(date_format) + '] ');
    return ansi.reset();
  };

  exports.log = log = function(s, d, options) {
    if (options == null) {
      options = {};
    }
    if ((options.date == null) || options.date) {
      logDate();
    }
    if (options.hex != null) {
      ansi.hex(options.hex);
    }
    if (options.color != null) {
      ansi.fg[options.color]();
    }
    ansi.write(s);
    ansi.reset();
    if (d != null) {
      ansi.write(' ' + util.inspect(d, {
        colors: true
      }));
    }
    return ansi.write('\n');
  };

  log.w = function(s, d) {
    return log(s, d, {
      color: 'yellow'
    });
  };

  log.i = function(s, d) {
    return log(s, d, {
      color: 'cyan'
    });
  };

  log.e = function(s, d) {
    return log(s, d, {
      color: 'red'
    });
  };

  log.d = function(s, d) {
    return log(s, d, {
      color: 'grey'
    });
  };

  log.s = function(s, d) {
    return log(s, d, {
      color: 'green'
    });
  };

  exports.capitalize = function(type) {
    return type[0].toUpperCase() + type.slice(1);
  };

  exports.randomString = function(len) {
    var s;
    if (len == null) {
      len = 8;
    }
    s = '';
    while (s.length < len) {
      s += Math.random().toString(36).slice(2, len - s.length + 2);
    }
    return s;
  };

  exports.serviceSummary = function(service) {
    return service.name + '@' + service.binding.host + ':' + service.binding.port;
  };

  exports.makeAddress = function(proto, host, port) {
    var address;
    address = proto + '://' + host;
    if (proto !== 'ipc') {
      address += ':' + port;
    }
    return address;
  };

  exports.randomPort = function() {
    return 10000 + Math.floor(Math.random() * 50000);
  };

  descend = function(o, c) {
    if (c.length === 1) {
      return o[c[0]].bind(o);
    } else {
      return descend(o[c.shift()], c);
    }
  };

  exports.descend = descend;

}).call(this);
