// Generated by CoffeeScript 1.7.1
(function() {
  var CONNECTION_LINGER_MS, CONNECTION_RETRY_MS, CONNECTION_TIMEOUT_MS, Client, Connection, ConsulAgent, KEEPALIVE, VERBOSE, helpers, log, util, _,
    __slice = [].slice;

  util = require('util');

  helpers = require('./helpers');

  _ = require('underscore');

  ConsulAgent = require('./consul-agent');

  Connection = require('./connection');

  log = helpers.log;

  VERBOSE = process.env.SOMATA_VERBOSE || false;

  KEEPALIVE = process.env.SOMATA_KEEPALIVE || false;

  CONNECTION_TIMEOUT_MS = 6500;

  CONNECTION_LINGER_MS = 1500;

  CONNECTION_RETRY_MS = 2500;

  Client = function(options) {
    this.options = options != null ? options : {};
    this.consul_agent = new ConsulAgent;
    this.subscriptions = {};
    return this;
  };

  Client.prototype.service_connections = {};

  Client.prototype.call = function() {
    var args, cb, method, service_name, _i;
    service_name = arguments[0], method = arguments[1], args = 4 <= arguments.length ? __slice.call(arguments, 2, _i = arguments.length - 1) : (_i = 2, []), cb = arguments[_i++];
    return this.remote.apply(this, [service_name, method].concat(__slice.call(args), [cb]));
  };

  Client.prototype.remote = function() {
    var args, cb, method, service_name, _i;
    service_name = arguments[0], method = arguments[1], args = 4 <= arguments.length ? __slice.call(arguments, 2, _i = arguments.length - 1) : (_i = 2, []), cb = arguments[_i++];
    return this.getServiceConnection(service_name, function(err, service_connection) {
      if (err) {
        return log.e(err);
      } else {
        return service_connection.sendMethod.apply(service_connection, [method].concat(__slice.call(args), [cb]));
      }
    });
  };

  Client.prototype.on = function(service_name, type, cb) {
    return this.subscribe(service_name, type, cb);
  };

  Client.prototype.subscribe = function(service_name, type, cb) {
    var _retry_subscribe;
    _retry_subscribe = ((function(_this) {
      return function() {
        return _this.subscribe(service_name, type, cb);
      };
    })(this));
    return this.getServiceConnection(service_name, (function(_this) {
      return function(err, service_connection) {
        var service, subscription;
        if (err) {
          log.e(err + ("... retrying in " + (CONNECTION_RETRY_MS / 1000) + "s"));
          return setTimeout(_retry_subscribe, CONNECTION_RETRY_MS);
        } else {
          service = service_connection.service;
          subscription = service_connection.sendSubscribe(type, cb);
          return _this.consul_agent.once('deregister:services/' + service.ID, function() {
            delete service_connection.pending_responses[subscription.id];
            return _retry_subscribe();
          });
        }
      };
    })(this));
  };

  Client.prototype.getServiceConnection = function(service_name, cb) {
    var service_connection;
    if (service_connection = this.service_connections[service_name]) {
      return cb(null, service_connection);
    } else {
      return this.consul_agent.getHealthyServiceInstances(service_name, (function(_this) {
        return function(err, healthy_instances) {
          var instance;
          if (!healthy_instances.length) {
            return cb("Could not find service", null);
          }
          instance = helpers.randomChoice(healthy_instances);
          service_connection = _this.connectToService(instance);
          _this.saveServiceConnection(instance.Service, service_connection);
          return cb(null, service_connection);
        };
      })(this));
    }
  };

  Client.prototype.connectToService = function(instance) {
    var connection;
    if (VERBOSE) {
      log.i("[connectToService] Connecting to " + instance.Service.Service + " @ " + instance.Node.Node + " <" + instance.Node.Address + ":" + instance.Service.Port + ">");
    }
    connection = Connection.fromConsulService(instance);
    return connection;
  };

  Client.prototype.saveServiceConnection = function(service, service_connection) {
    service_connection.service = service;
    this.service_connections[service.Service] = service_connection;
    if (KEEPALIVE) {
      return this.consul_agent.once('deregister:services/' + service.ID, (function(_this) {
        return function() {
          return _this.killConnection(service.Service);
        };
      })(this));
    } else {
      return setTimeout(((function(_this) {
        return function() {
          return _this.killConnection(service.Service);
        };
      })(this)), CONNECTION_TIMEOUT_MS);
    }
  };

  Client.prototype.purgeDeadServiceConnections = function() {
    return this.getUnhealthyServiceInstances((function(_this) {
      return function(err, unhealthy_instances) {
        return unhealthy_instances.each(function(instance) {
          if (_this.service_connections[instance.Service.Service] != null) {
            return _this.killConnection(instance.Service.Service);
          }
        });
      };
    })(this));
  };

  Client.prototype.killConnection = function(service_name) {
    var connection;
    if (VERBOSE) {
      log.w('[killConnection] ' + service_name);
    }
    connection = this.service_connections[service_name];
    delete this.service_connections[service_name];
    return setTimeout((function() {
      return connection.close();
    }), CONNECTION_LINGER_MS);
  };

  module.exports = Client;

}).call(this);
