// Generated by CoffeeScript 1.7.1
(function() {
  var CONNECTION_KEEPALIVE_MS, CONNECTION_LINGER_MS, CONNECTION_RETRY_MS, Client, Connection, ConsulAgent, EventEmitter, KEEPALIVE, PREFIX, VERBOSE, helpers, log, util, _,
    __slice = [].slice;

  util = require('util');

  helpers = require('./helpers');

  _ = require('underscore');

  EventEmitter = require('events').EventEmitter;

  ConsulAgent = require('./consul-agent');

  Connection = require('./connection');

  log = helpers.log;

  VERBOSE = process.env.SOMATA_VERBOSE || false;

  KEEPALIVE = process.env.SOMATA_KEEPALIVE || true;

  CONNECTION_KEEPALIVE_MS = 6500;

  CONNECTION_LINGER_MS = 1500;

  CONNECTION_RETRY_MS = 2500;

  PREFIX = '';

  if (process.env.SOMATA_PREFIX != null) {
    PREFIX = process.env.SOMATA_PREFIX + ':';
  }

  Client = (function() {
    function Client(options) {
      if (options == null) {
        options = {};
      }
      _.extend(this, options);
      this.setDefaults();
      this.consul_agent = new ConsulAgent;
      this.connection_manager = new EventEmitter;
      this.service_subscriptions = {};
      this.service_connections = {};
      this.message_services = {};
      process.on('SIGINT', (function(_this) {
        return function() {
          _this.unsubscribeAll();
          if (_this.parent == null) {
            return process.exit();
          }
        };
      })(this));
      return this;
    }

    return Client;

  })();

  Client.prototype.setDefaults = function() {
    return _.defaults(this, {
      save_connections: true
    });
  };

  Client.prototype.call = function() {
    var args, cb, method, service_name, _i;
    service_name = arguments[0], method = arguments[1], args = 4 <= arguments.length ? __slice.call(arguments, 2, _i = arguments.length - 1) : (_i = 2, []), cb = arguments[_i++];
    return this.remote.apply(this, [service_name, method].concat(__slice.call(args), [cb]));
  };

  Client.prototype.remote = function() {
    var args, cb, message_id, method, service_name, _i;
    service_name = arguments[0], method = arguments[1], args = 4 <= arguments.length ? __slice.call(arguments, 2, _i = arguments.length - 1) : (_i = 2, []), cb = arguments[_i++];
    if (typeof cb !== 'function') {
      if (cb != null) {
        args.push(cb);
      }
      if (VERBOSE) {
        cb = function() {
          return log.w("" + service_name + ":" + method + " completed with no callback.");
        };
      } else {
        cb = null;
      }
    }
    message_id = helpers.randomString(16);
    this.getServiceConnection(service_name, (function(_this) {
      return function(err, service_connection) {
        if (err) {
          return log.e(err);
        } else {
          _this.message_services[message_id] = service_connection.service_id;
          return service_connection.sendMethod(message_id, method, args, cb);
        }
      };
    })(this));
    return message_id;
  };

  Client.prototype.subscribe = function() {
    var args, cb, service_name, subscription_id, type, _i;
    service_name = arguments[0], type = arguments[1], args = 4 <= arguments.length ? __slice.call(arguments, 2, _i = arguments.length - 1) : (_i = 2, []), cb = arguments[_i++];
    if (typeof cb !== 'function') {
      log.w(("[Client.subscribe] " + service_name + ":" + type + " not a function: ") + cb);
      args.push(cb);
      cb = function() {
        return log.w("" + service_name + ":" + type + " event received with no callback.");
      };
    }
    subscription_id = "" + service_name + ":" + type;
    if (args.length) {
      subscription_id += "(" + (args.join(', ')) + ")";
    }
    log.i("[Client.subscribe] subscribing with id=" + subscription_id);
    this.getServiceConnection(service_name, (function(_this) {
      return function(err, service_connection, retry) {
        var service, subscription;
        if (retry == null) {
          retry = true;
        }
        service = service_connection.service;
        subscription = service_connection.sendSubscribe(subscription_id, type, args, cb);
        subscription.service = service_name;
        subscription.connection = service_connection;
        _this.service_subscriptions[subscription_id] = subscription;
        return _this.consul_agent.once('deregister:services/' + service.ID, function() {
          if (service_connection.pending_responses[subscription_id] != null) {
            delete service_connection.pending_responses[subscription_id];
            return _retrySubscribe();
          }
        });
      };
    })(this));
    return subscription_id;
  };

  Client.prototype.on = function() {
    var args, cb, service_name, type, _i;
    service_name = arguments[0], type = arguments[1], args = 4 <= arguments.length ? __slice.call(arguments, 2, _i = arguments.length - 1) : (_i = 2, []), cb = arguments[_i++];
    return this.subscribe.apply(this, [service_name, type].concat(__slice.call(args), [cb]));
  };

  Client.prototype.unsubscribe = function(_sub_id) {
    return _.chain(this.service_subscriptions).pairs().filter(function(pair) {
      return pair[0] === _sub_id;
    }).map((function(_this) {
      return function(pair, _cb) {
        var sub, sub_id;
        sub_id = pair[0], sub = pair[1];
        sub.connection.sendUnsubscribe(sub_id, sub.type);
        return delete _this.service_subscriptions[sub_id];
      };
    })(this));
  };

  Client.prototype.unsubscribeAll = function() {
    return _.pairs(this.service_subscriptions).map(function(_arg, _cb) {
      var sub, sub_id;
      sub_id = _arg[0], sub = _arg[1];
      return sub.connection.sendUnsubscribe(sub_id, sub.type);
    });
  };

  Client.prototype.bindRemote = function(service_name) {
    return this.remote.bind(this, service_name);
  };

  Client.prototype.getServiceConnection = function(service_name, cb) {
    service_name = PREFIX + service_name;
    return this.consul_agent.getServiceHealth(service_name, (function(_this) {
      return function(err, healthy_instances) {
        var instance, service_connection;
        if (!healthy_instances.length) {
          err = "Could not find service `" + service_name + "`";
          log.e(err);
          return cb(err, null);
        }
        instance = helpers.randomChoice(healthy_instances);
        service_connection = _this.connectToService(instance);
        service_connection.connected = true;
        _this.saveServiceConnection(instance.Service, service_connection);
        cb(null, service_connection);
        return _this.connection_manager.emit('connected:' + service_name, service_connection);
      };
    })(this));
  };

  Client.prototype.connectToService = function(instance) {
    var connection, _ref;
    if (connection = (_ref = this.service_connections[instance.Service.Service]) != null ? _ref[instance.Service.ID] : void 0) {
      if (connection.connected) {
        return connection;
      }
    }
    if (VERBOSE) {
      log.i("[connectToService] Connecting to " + instance.Service.ID + " @ " + instance.Node.Node + " <" + instance.Node.Address + ":" + instance.Service.Port + ">");
    }
    connection = Connection.fromConsulService(instance, this.connection_options);
    if (KEEPALIVE) {
      this.consul_agent.once('deregister:services/' + instance.Service.ID, (function(_this) {
        return function() {
          log.w("Deregistered: " + instance.Service.ID);
          return _this.killConnection(instance);
        };
      })(this));
    } else {
      setTimeout(((function(_this) {
        return function() {
          return _this.killConnection(instance);
        };
      })(this)), CONNECTION_KEEPALIVE_MS);
    }
    return connection;
  };

  Client.prototype.saveServiceConnection = function(service, service_connection) {
    var _base, _name;
    service_connection.service = service;
    (_base = this.service_connections)[_name = service.Service] || (_base[_name] = {});
    return this.service_connections[service.Service][service.ID] = service_connection;
  };

  Client.prototype.purgeDeadServiceConnections = function() {
    return this.getUnhealthyServiceInstances((function(_this) {
      return function(err, unhealthy_instances) {
        return unhealthy_instances.each(function(instance) {
          if (_this.service_connections[instance.Service.Service] != null) {
            return _this.killConnection(instance);
          }
        });
      };
    })(this));
  };

  Client.prototype.killConnection = function(instance) {
    var connection, doClose, service_id, service_name, _ref;
    service_name = instance.Service.Service;
    service_id = instance.Service.ID;
    if (VERBOSE) {
      log.w('[killConnection] ' + service_name);
    }
    if (connection = (_ref = this.service_connections[service_name]) != null ? _ref[service_id] : void 0) {
      delete this.service_connections[service_name][service_id];
      doClose = function() {
        log.w("Closing connection to " + service_name + "...");
        return connection.close();
      };
      return setTimeout(doClose, CONNECTION_LINGER_MS);
    }
  };

  module.exports = Client;

}).call(this);
