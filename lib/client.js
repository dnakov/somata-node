// Generated by CoffeeScript 1.7.1
(function() {
  var Client, Connection, Registry, log, randomString, serviceSummary, util, _, _ref,
    __slice = [].slice;

  util = require('util');

  _ref = require('./helpers'), log = _ref.log, randomString = _ref.randomString, serviceSummary = _ref.serviceSummary;

  _ = require('underscore');

  Connection = require('./connection');

  Registry = require('./registry');

  Client = (function() {
    Client.prototype.service_connections = {};

    function Client(options) {
      var _base;
      this.options = options != null ? options : {};
      (_base = this.options).registry || (_base.registry = {});
      this.options.registry = _.defaults(this.options.registry, Registry.DEFAULTS);
      this.registry_connection = new Connection(this.options.registry);
    }

    Client.prototype.sendQuery = function(service_name, on_response) {
      return this.registry_connection.send({
        type: 'query',
        args: {
          service_name: service_name
        }
      }, function(err, response) {
        return on_response(response.service);
      });
    };

    Client.prototype.remote = function() {
      var args, cb, method, service_name, _i;
      service_name = arguments[0], method = arguments[1], args = 4 <= arguments.length ? __slice.call(arguments, 2, _i = arguments.length - 1) : (_i = 2, []), cb = arguments[_i++];
      return this.getServiceConnection(service_name, function(err, service_connection) {
        return service_connection.send({
          type: 'method',
          method: method,
          args: args
        }, function(err, response) {
          return cb(null, response.response);
        });
      });
    };

    Client.prototype.getServiceConnection = function(service_name, cb) {
      var service_connection;
      if (service_connection = this.service_connections[service_name]) {
        return cb(null, service_connection);
      } else {
        return this.sendQuery(service_name, (function(_this) {
          return function(service) {
            if (service == null) {
              return log("Could not find service", {
                color: 'yellow'
              });
            } else {
              log("Found service " + (serviceSummary(service)), {
                color: 'green'
              });
              service_connection = _this.connectToService(service);
              _this.saveServiceConnection(service_name, service_connection);
              return cb(null, service_connection);
            }
          };
        })(this));
      }
    };

    Client.prototype.connectToService = function(service) {
      var service_connection;
      return service_connection = new Connection(service.binding);
    };

    Client.prototype.saveServiceConnection = function(service_name, service_connection) {
      this.service_connections[service_name] = service_connection;
      return setTimeout(this.killConnection.bind(this, service_name, service_connection), 1500);
    };

    Client.prototype.killConnection = function(service_name, service_connection) {
      setTimeout((function() {
        return service_connection.close();
      }), 1000);
      return delete this.service_connections[service_name];
    };

    return Client;

  })();

  module.exports = Client;

}).call(this);
