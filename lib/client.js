// Generated by CoffeeScript 1.7.1
(function() {
  var Client, Connection, ConsulAgent, VERBOSE, helpers, log, util, _,
    __slice = [].slice;

  util = require('util');

  helpers = require('./helpers');

  _ = require('underscore');

  ConsulAgent = require('./consul-agent');

  Connection = require('./connection');

  log = helpers.log;

  VERBOSE = false;

  Client = function(options) {
    this.options = options != null ? options : {};
    this.consul_agent = new ConsulAgent;
    return this;
  };

  Client.prototype.service_connections = {};

  Client.prototype.remote = function() {
    var args, cb, method, service_name, _i;
    service_name = arguments[0], method = arguments[1], args = 4 <= arguments.length ? __slice.call(arguments, 2, _i = arguments.length - 1) : (_i = 2, []), cb = arguments[_i++];
    return this.getServiceConnection(service_name, function(err, service_connection) {
      return service_connection.invoke.apply(service_connection, [method].concat(__slice.call(args), [cb]));
    });
  };

  Client.prototype.getServiceConnection = function(service_name, cb) {
    var service_connection;
    if (service_connection = this.service_connections[service_name]) {
      return cb(null, service_connection);
    } else {
      return this.getServiceNodes(service_name, (function(_this) {
        return function(err, nodes) {
          var node;
          if ((nodes == null) || !nodes.length) {
            return log("Could not find service", {
              color: 'yellow'
            });
          } else {
            node = helpers.randomChoice(nodes);
            service_connection = _this.connectToServiceNode(node);
            _this.saveServiceConnection(service_name, service_connection);
            return cb(null, service_connection);
          }
        };
      })(this));
    }
  };

  Client.prototype.getServiceNodes = function(service_name, cb) {
    return this.consul_agent.getServiceNodes(service_name, cb);
  };

  Client.prototype.connectToServiceNode = function(node) {
    var connection;
    if (VERBOSE) {
      log.s("[connectToServiceNode] Connecting to " + (util.inspect(node)));
    }
    connection = Connection.fromConsulNode(node);
    return connection;
  };

  Client.prototype.saveServiceConnection = function(service_name, service_connection) {
    this.service_connections[service_name] = service_connection;
    return setTimeout(this.killConnection.bind(this, service_name, service_connection), 3500);
  };

  Client.prototype.killConnection = function(service_name, service_connection) {
    setTimeout((function() {
      return service_connection.close();
    }), 1000);
    return delete this.service_connections[service_name];
  };

  module.exports = Client;

}).call(this);
