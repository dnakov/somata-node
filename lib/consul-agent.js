// Generated by CoffeeScript 1.8.0
(function() {
  var CONSUL_URL, ConsulAgent, EventEmitter, HEALTH_POLL_MS, VERBOSE, WATCH_S, async, healthyInstances, last_index, log, makeWatchQuery, request, unhealthyInstances, util, _,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  async = require('async');

  request = require('request');

  util = require('util');

  log = require('./helpers').log;

  EventEmitter = require('events').EventEmitter;

  _ = require('underscore');

  VERBOSE = process.env.SOMATA_VERBOSE || false;

  CONSUL_URL = process.env.SOMATA_CONSUL_URL || 'http://localhost:8500/v1';

  HEALTH_POLL_MS = parseInt(process.env.SOMATA_HEALTH_POLL) || 2000;

  module.exports = ConsulAgent = (function(_super) {
    __extends(ConsulAgent, _super);

    function ConsulAgent(options) {
      if (options == null) {
        options = {};
      }
      _.extend(this, options);
      this.setDefaults();
      this.startWatchingKnownServices();
      return this;
    }

    return ConsulAgent;

  })(EventEmitter);

  ConsulAgent.prototype.setDefaults = function() {
    this.base_url || (this.base_url = CONSUL_URL);
    this.known_services = [];
    return this.known_instances = {};
  };

  last_index = 0;

  WATCH_S = 60;

  makeWatchQuery = function(index) {
    return "?wait=" + WATCH_S + "s&index=" + index;
  };

  ConsulAgent.prototype.apiRequest = function(method, path, data, cb) {
    var request_options;
    if (cb == null) {
      cb = data;
      data = null;
    }
    request_options = {
      url: this.base_url + path,
      method: method,
      json: true,
      body: data
    };
    return request(request_options, function(err, res, data) {
      var _last_index;
      if (err) {
        log.e('[ConsulAgent.apiRequest] ERROR]', err);
        return cb(err);
      }
      if (VERBOSE) {
        log.d('[apiRequest] Response status: ' + res.statusCode + ' url: ' + path);
      }
      if (_last_index = res.headers['x-consul-index']) {
        last_index = _last_index;
      }
      if (cb != null) {
        return cb(err, data);
      }
    });
  };

  ConsulAgent.prototype.getNodes = function(cb) {
    return this.apiRequest('GET', '/catalog/nodes', cb);
  };

  ConsulAgent.prototype.getServices = function(cb) {
    return this.apiRequest('GET', '/catalog/services', cb);
  };

  ConsulAgent.prototype.getServiceNodes = function(service_id, cb) {
    return this.apiRequest('GET', '/catalog/service/' + service_id, cb);
  };

  ConsulAgent.prototype.registerExternalService = function(service, cb) {
    return this.apiRequest('POST', '/catalog/register', service, cb);
  };

  ConsulAgent.prototype.deregisterExternalService = function(service, cb) {
    return this.apiRequest('PUT', '/catalog/deregister', service, cb);
  };

  ConsulAgent.prototype.watchServiceHealth = function(service_id, index, cb) {
    if (index == null) {
      index = last_index;
    }
    return this.apiRequest('GET', '/health/service/' + service_id + makeWatchQuery(index), cb);
  };

  ConsulAgent.prototype.fetchServiceHealth = function(service_id, cb) {
    return this.apiRequest('GET', '/health/service/' + service_id, cb);
  };

  ConsulAgent.prototype.registerService = function(service, cb) {
    return this.apiRequest('PUT', '/agent/service/register', service, cb);
  };

  ConsulAgent.prototype.deregisterService = function(service_id, cb) {
    return this.apiRequest('DELETE', '/agent/service/deregister/' + service_id, cb);
  };

  ConsulAgent.prototype.registerCheck = function(check, cb) {
    return this.apiRequest('PUT', '/agent/check/register', check, cb);
  };

  ConsulAgent.prototype.deregisterCheck = function(check_id, cb) {
    return this.apiRequest('DELETE', '/agent/check/deregister/' + check_id, cb);
  };

  ConsulAgent.prototype.checkPass = function(check_id, cb) {
    return this.apiRequest('GET', '/agent/check/pass/' + check_id, cb);
  };

  healthyInstances = function(instances) {
    return instances.filter(function(i) {
      return i.Checks.filter(function(c) {
        return c.Status === 'critical';
      }).length === 0;
    });
  };

  unhealthyInstances = function(instances) {
    return instances.filter(function(i) {
      return i.Checks.filter(function(c) {
        return c.Status === 'critical';
      }).length !== 0;
    });
  };

  ConsulAgent.prototype.getServiceHealth = function(service_name, cb) {
    var healthy_instances;
    if (__indexOf.call(this.known_services, service_name) >= 0 && (healthy_instances = this.known_instances[service_name])) {
      return cb(null, healthy_instances);
    } else {
      return this.watchServiceHealth(service_name, 0, (function(_this) {
        return function(err, service_instances) {
          if (err != null) {
            return cb(err, []);
          }
          healthy_instances = healthyInstances(service_instances);
          _this.known_instances[service_name] = healthy_instances;
          if (!(__indexOf.call(_this.known_services, service_name) >= 0)) {
            _this.known_services.push(service_name);
          }
          return cb(err, healthy_instances);
        };
      })(this));
    }
  };

  ConsulAgent.prototype.getAllServicesHealth = function(cb) {
    return this.getServices((function(_this) {
      return function(err, all_services) {
        var all_service_names;
        all_service_names = _.keys(all_services).filter(function(n) {
          return n !== 'consul';
        });
        return async.map(all_service_names, function(service_name, _cb) {
          return _this.fetchServiceHealth(service_name, function(err, service_health) {
            return _cb(err, [service_name, service_health]);
          });
        }, function(err, all_service_healths) {
          return cb(err, _.object(all_service_healths));
        });
      };
    })(this));
  };

  ConsulAgent.prototype.knowService = function(service_name) {
    return this.known_services = _.union(this.known_services, [service_name]);
  };

  ConsulAgent.prototype.startWatchingKnownServices = function() {
    var again;
    again = this.startWatchingKnownServices.bind(this);
    if (this.known_services.length) {
      return async.map(this.known_services, (function(_this) {
        return function(service_name, _cb) {
          return _this.updateServiceHealth(service_name, null, _cb);
        };
      })(this), again);
    } else {
      return setTimeout(again, 250);
    }
  };

  ConsulAgent.prototype.updateServiceHealth = function(service_name, index, cb) {
    if (index == null) {
      index = null;
    }
    if (index === null) {
      index = last_index;
    }
    return this.watchServiceHealth(service_name, index, (function(_this) {
      return function(err, service_instances) {
        var dead_ids, getServiceID, healthy_ids, healthy_instances, known_ids, new_ids, _ref;
        getServiceID = function(ins) {
          return ins.Service.ID;
        };
        healthy_instances = healthyInstances(service_instances);
        healthy_ids = healthy_instances.map(getServiceID);
        known_ids = ((_ref = _this.known_instances[service_name]) != null ? _ref.map(getServiceID) : void 0) || [];
        new_ids = healthy_ids.filter(function(i) {
          return __indexOf.call(known_ids, i) < 0;
        });
        dead_ids = known_ids.filter(function(i) {
          return __indexOf.call(healthy_ids, i) < 0;
        });
        new_ids.map(function(service_id) {
          var service_instance;
          service_instance = healthy_instances[service_id];
          return _this.emit('register:services/' + service_name, service_instance);
        });
        dead_ids.map(function(service_id) {
          return _this.emit('deregister:services/' + service_id);
        });
        _this.known_instances[service_name] = healthy_instances;
        if (cb != null) {
          return cb(null, healthy_instances);
        }
      };
    })(this));
  };

}).call(this);
