// Generated by CoffeeScript 1.7.1
(function() {
  var CONSUL_URL, ConsulAgent, EventEmitter, HEALTH_POLL_MS, VERBOSE, async, healthyInstances, log, request, unhealthyInstances, util, _,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  async = require('async');

  request = require('request');

  util = require('util');

  log = require('./helpers').log;

  EventEmitter = require('events').EventEmitter;

  _ = require('underscore');

  VERBOSE = false;

  CONSUL_URL = process.env.SOMATA_CONSUL_URL || 'http://localhost:8500/v1';

  HEALTH_POLL_MS = parseInt(process.env.SOMATA_HEALTH_POLL) || 2000;

  module.exports = ConsulAgent = (function(_super) {
    __extends(ConsulAgent, _super);

    function ConsulAgent(options) {
      this.options = options != null ? options : {};
      this.setDefaults();
      this.startUpdatingInstances();
      return this;
    }

    return ConsulAgent;

  })(EventEmitter);

  ConsulAgent.prototype.setDefaults = function() {
    var _base;
    (_base = this.options).base_url || (_base.base_url = CONSUL_URL);
    return this.known_instances = {};
  };

  ConsulAgent.prototype.apiRequest = function(method, path, data, cb) {
    var request_options;
    if (cb == null) {
      cb = data;
      data = null;
    }
    request_options = {
      url: this.options.base_url + path,
      method: method,
      json: true,
      body: data
    };
    return request(request_options, function(err, res, data) {
      if (VERBOSE) {
        log.d('[apiRequest] Response status: ' + res.statusCode);
      }
      if (cb != null) {
        return cb(err, data);
      }
    });
  };

  ConsulAgent.prototype.getNodes = function(cb) {
    return this.apiRequest('GET', '/catalog/nodes', cb);
  };

  ConsulAgent.prototype.getServices = function(cb) {
    return this.apiRequest('GET', '/catalog/services', cb);
  };

  ConsulAgent.prototype.getServiceNodes = function(service_id, cb) {
    return this.apiRequest('GET', '/catalog/service/' + service_id, cb);
  };

  ConsulAgent.prototype.registerExternalService = function(service, cb) {
    return this.apiRequest('POST', '/catalog/register', service, cb);
  };

  ConsulAgent.prototype.deregisterExternalService = function(service, cb) {
    return this.apiRequest('PUT', '/catalog/deregister', service, cb);
  };

  ConsulAgent.prototype.getServiceHealth = function(service_id, cb) {
    return this.apiRequest('GET', '/health/service/' + service_id, cb);
  };

  ConsulAgent.prototype.registerService = function(service, cb) {
    return this.apiRequest('PUT', '/agent/service/register', service, cb);
  };

  ConsulAgent.prototype.deregisterService = function(service_id, cb) {
    return this.apiRequest('DELETE', '/agent/service/deregister/' + service_id, cb);
  };

  ConsulAgent.prototype.registerCheck = function(check, cb) {
    return this.apiRequest('PUT', '/agent/check/register', check, cb);
  };

  ConsulAgent.prototype.deregisterCheck = function(check_id, cb) {
    return this.apiRequest('DELETE', '/agent/check/deregister/' + check_id, cb);
  };

  ConsulAgent.prototype.checkPass = function(check_id, cb) {
    return this.apiRequest('GET', '/agent/check/pass/' + check_id, cb);
  };

  ConsulAgent.prototype.getAllServicesHealth = function(cb) {
    var all_service_instances, self;
    all_service_instances = {};
    self = this;
    return self.getServices(function(err, services) {
      return async.map(_.keys(services), function(service_id, _cb) {
        return self.getServiceHealth(service_id, function(err, service_instances) {
          all_service_instances[service_id] = service_instances;
          return _cb();
        });
      }, function() {
        return cb(null, all_service_instances);
      });
    });
  };

  healthyInstances = function(instances) {
    return instances.filter(function(i) {
      return i.Checks.filter(function(c) {
        return c.Status === 'critical';
      }).length === 0;
    });
  };

  ConsulAgent.prototype.getHealthyServiceInstances = function(service_name, cb) {
    return this.getServiceHealth(service_name, function(err, instances) {
      return cb(err, healthyInstances(instances));
    });
  };

  unhealthyInstances = function(instances) {
    return instances.filter(function(i) {
      return i.Checks.filter(function(c) {
        return c.Status === 'critical';
      }).length !== 0;
    });
  };

  ConsulAgent.prototype.getUnhealthyServiceInstances = function(service_name, cb) {
    return this.getServiceHealth(service_name, function(err, instances) {
      return cb(err, unhealthyInstances(instances));
    });
  };

  ConsulAgent.prototype.updateInstances = function(startup) {
    if (startup == null) {
      startup = false;
    }
    return this.getAllServicesHealth((function(_this) {
      return function(err, all_service_instances) {
        var dead_ids, healthy_ids, healthy_instances, known_ids, new_ids;
        healthy_instances = _.indexBy(healthyInstances(_.flatten(_.values(all_service_instances))), function(ins) {
          return ins.Service.ID;
        });
        healthy_ids = _.map(healthy_instances, function(ins) {
          return ins.Service.ID;
        });
        known_ids = _.map(_this.known_instances, function(ins) {
          return ins.Service.ID;
        });
        new_ids = healthy_ids.filter(function(i) {
          return __indexOf.call(known_ids, i) < 0;
        });
        dead_ids = known_ids.filter(function(i) {
          return __indexOf.call(healthy_ids, i) < 0;
        });
        if (!startup) {
          new_ids.map(function(i) {
            return _this.emit('register:services/' + i, healthy_instances[i]);
          });
          dead_ids.map(function(i) {
            return _this.emit('deregister:services/' + i);
          });
        }
        return _this.known_instances = healthy_instances;
      };
    })(this));
  };

  ConsulAgent.prototype.startUpdatingInstances = function() {
    this.updateInstances(true);
    return setInterval(this.updateInstances.bind(this), HEALTH_POLL_MS);
  };

}).call(this);
