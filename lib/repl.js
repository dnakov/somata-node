#!/usr/bin/env node
// Generated by CoffeeScript 1.7.1
(function() {
  var BargePipeline, PipelineREPL, barge, client, pipe, pipeline, repl,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __slice = [].slice;

  pipeline = require('pipeline');

  barge = require('barge');

  client = new barge.Client;

  BargePipeline = (function(_super) {
    __extends(BargePipeline, _super);

    function BargePipeline() {
      return BargePipeline.__super__.constructor.apply(this, arguments);
    }

    return BargePipeline;

  })(pipeline.Pipeline);

  BargePipeline.prototype.get = function(t, k) {
    var found, method, service, service_method;
    found = BargePipeline.__super__.get.apply(this, arguments);
    if ((found == null) && t === 'fns') {
      if (service_method = k.match(/(\w+)\.(\w+)/)) {
        service = service_method[1];
        method = service_method[2];
        found = (function(_this) {
          return function(inp, args, ctx, cb) {
            return client.remote.apply(client, [service, method].concat(__slice.call(args), [cb]));
          };
        })(this);
      }
    }
    return found;
  };

  PipelineREPL = require('../../qnectar/pipeline/repl');

  pipe = new BargePipeline();

  pipe.use({
    'members': function(inp, args, ctx, cb) {
      return client.consul_agent.getNodes(cb);
    },
    'services': function(inp, args, ctx, cb) {
      return client.consul_agent.getServices(cb);
    },
    'service-nodes': function(inp, args, ctx, cb) {
      return client.consul_agent.getServiceNodes(args[0], cb);
    }
  });

  repl = new PipelineREPL(pipe);

  repl.startReadline();

}).call(this);
