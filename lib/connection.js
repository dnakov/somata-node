// Generated by CoffeeScript 1.7.1
(function() {
  var Connection, DEFAULT_CONNECT, DEFAULT_PROTO, EventEmitter, VERBOSE, log, randomString, util, zmq, _, _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  zmq = require('zmq');

  util = require('util');

  _ = require('underscore');

  EventEmitter = require('events').EventEmitter;

  _ref = require('./helpers'), log = _ref.log, randomString = _ref.randomString;

  VERBOSE = process.env.SOMATA_VERBOSE || false;

  DEFAULT_PROTO = 'tcp';

  DEFAULT_CONNECT = 'localhost';

  module.exports = Connection = (function(_super) {
    __extends(Connection, _super);

    Connection.prototype.pending_responses = {};

    function Connection(options) {
      if (options == null) {
        options = {};
      }
      _.extend(this, options);
      this.id || (this.id = randomString());
      this.proto || (this.proto = DEFAULT_PROTO);
      this.host || (this.host = DEFAULT_CONNECT);
      this.address = this.proto + '://' + this.host + ':' + this.port;
      this.connect();
    }

    Connection.prototype.connect = function() {
      this.socket = zmq.socket('dealer');
      this.socket.identity = this.id;
      this.socket.connect(this.address);
      this.socket.on('message', (function(_this) {
        return function(message_json) {
          return _this.handleMessage(JSON.parse(message_json));
        };
      })(this));
      if (VERBOSE) {
        return log("Socket " + this.id + " connected to " + this.address + "...");
      }
    };

    Connection.prototype.handleMessage = function(message) {
      var on_response;
      if (VERBOSE) {
        log("[connection.handleMessage] " + (util.inspect(message).slice(0, 100).replace(/\s+/g, ' ')));
      }
      if (on_response = this.pending_responses[message.id]) {
        if (on_response.timeout != null) {
          clearTimeout(on_response.timeout);
        }
        if (message.kind === 'response') {
          on_response(null, message.response);
          return delete this.pending_responses[message.id];
        } else if (message.kind === 'error') {
          on_response(message.error, null);
          return delete this.pending_responses[message.id];
        } else if (message.kind === 'event') {
          return on_response(null, message.event);
        } else if (message.kind === 'end') {
          on_response(null, null, true);
          return delete this.pending_responses[message.id];
        }
      } else {
        return log.w('[handleMessage] No pending response for ' + message.id, this.pending_responses);
      }
    };

    Connection.prototype.setPending = function(message_id, on_response) {
      var dotimeout;
      this.pending_responses[message_id] = on_response;
      console.log('[setPending] for ' + message_id);
      if (this.timeout_ms) {
        dotimeout = (function(_this) {
          return function() {
            log.e("[TIMEOUT] Timing out request " + message_id);
            _this.pending_responses[message_id]({
              timeout: _this.timeout_ms,
              message: "Timed out"
            });
            return delete _this.pending_responses[message_id];
          };
        })(this);
        return this.pending_responses[message_id].timeout = setTimeout(dotimeout, this.timeout_ms);
      }
    };

    Connection.prototype.send = function(message, on_response) {
      message.id || (message.id = randomString(16));
      this.socket.send(JSON.stringify(message));
      if (on_response != null) {
        this.setPending(message.id, on_response);
      }
      return message;
    };

    Connection.prototype.sendMethod = function(id, method, args, cb) {
      var method_msg;
      method_msg = {
        id: id,
        kind: 'method',
        method: method,
        args: args
      };
      return this.send(method_msg, cb);
    };

    Connection.prototype.sendSubscribe = function(id, type, args, cb) {
      var subscribe_msg;
      subscribe_msg = {
        id: id,
        kind: 'subscribe',
        type: type,
        args: args
      };
      return this.send(subscribe_msg, cb);
    };

    Connection.prototype.sendUnsubscribe = function(id, type) {
      var unsubscribe_msg;
      unsubscribe_msg = {
        id: id,
        kind: 'unsubscribe',
        type: type
      };
      this.send(unsubscribe_msg);
      return delete this.pending_responses[id];
    };

    Connection.prototype.close = function() {
      return this.socket.close();
    };

    return Connection;

  })(EventEmitter);

  Connection.fromConsulService = function(instance, options) {
    if (options == null) {
      options = {};
    }
    return new Connection(_.extend(options, {
      host: instance.Node.Address,
      port: instance.Service.Port
    }));
  };

}).call(this);
