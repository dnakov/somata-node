// Generated by CoffeeScript 1.7.1
(function() {
  var Connection, DEFAULT_CONNECT, DEFAULT_PROTO, EventEmitter, VERBOSE, log, randomString, util, zmq, _, _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __slice = [].slice;

  zmq = require('zmq');

  util = require('util');

  _ = require('underscore');

  EventEmitter = require('events').EventEmitter;

  _ref = require('./helpers'), log = _ref.log, randomString = _ref.randomString;

  VERBOSE = false;

  DEFAULT_PROTO = 'tcp';

  DEFAULT_CONNECT = 'localhost';

  module.exports = Connection = (function(_super) {
    __extends(Connection, _super);

    Connection.prototype.pending_responses = {};

    function Connection(options) {
      if (options == null) {
        options = {};
      }
      _.extend(this, options);
      this.id || (this.id = randomString());
      this.proto || (this.proto = DEFAULT_PROTO);
      this.host || (this.host = DEFAULT_CONNECT);
      this.address = this.proto + '://' + this.host + ':' + this.port;
      this.connect();
    }

    Connection.prototype.connect = function() {
      this.socket = zmq.socket('dealer');
      this.socket.identity = this.id;
      this.socket.connect(this.address);
      this.socket.on('message', (function(_this) {
        return function(message_json) {
          return _this.handleMessage(JSON.parse(message_json));
        };
      })(this));
      if (VERBOSE) {
        return log("Socket " + this.id + " connected to " + this.address + "...");
      }
    };

    Connection.prototype.handleMessage = function(message) {
      var on_response;
      if (VERBOSE) {
        log(">: " + (util.inspect(message)));
      }
      if (on_response = this.pending_responses[message.id]) {
        if (message.kind === 'response') {
          return on_response(null, message.response);
        } else if (message.kind === 'error') {
          return on_response(message.error, null);
        }
      }
    };

    Connection.prototype.send = function(message, on_response) {
      message.id || (message.id = randomString(16));
      this.socket.send(JSON.stringify(message));
      if (on_response != null) {
        this.pending_responses[message.id] = on_response;
      }
      return message;
    };

    Connection.prototype.invoke = function() {
      var args, cb, method, method_msg, _i;
      method = arguments[0], args = 3 <= arguments.length ? __slice.call(arguments, 1, _i = arguments.length - 1) : (_i = 1, []), cb = arguments[_i++];
      method_msg = {
        kind: 'method',
        method: method,
        args: args
      };
      return this.send(method_msg, cb);
    };

    Connection.prototype.close = function() {
      return this.socket.close();
    };

    return Connection;

  })(EventEmitter);

  Connection.fromConsulService = function(instance) {
    return new Connection({
      host: instance.Node.Address,
      port: instance.Service.Port
    });
  };

}).call(this);
